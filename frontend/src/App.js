import React, { Component } from 'react';
import './App.css';
import Main from "./components/Main"
import Profile from "./components/details/Profile";
import Heart from "./components/details/Heart";
import Chat from "./components/details/Chat";
import Initpage from "./components/Initpage";
import SignUp from "./components/SignUp";
import Result from "./components/details/Result";
import { BrowserRouter, Route, Redirect } from 'react-router-dom';
import * as actions from './actions';
import { connect } from 'react-redux';
import axios from 'axios';

axios.defaults.xsrfCookieName = "csrftoken";
axios.defaults.xsrfHeaderName = "X-CSRFToken";

class App extends Component {

    constructor(props){
        super(props);

        this.state = { //Í≤∞Íµ≠Ïóî Ïä§ÌÜ†Ïñ¥Ïóê Îã§ ÎÑ£Ïñ¥Ïïº Ìï† ÎÜàÎì§. ÌäπÌûà, Ïù¥Í±∏ Ìï¥Í≤∞ÌïòÍ≥†ÎÇòÎ©¥ rankÍ∞Ä falseÎÉê trueÎÉêÏóê Îî∞Îùº Î≤ÑÌäºÏùÑ Î∞îÍøîÏ§òÏïºÌïúÎã§. Îã®, Í∑∏Ï†ÑÏóê axiosÎ•º ÎçòÏ†∏ÎÜìÏùÄ ÏÉÅÌÉúÏó¨ÏïºÌï®
            meeting_info: {},
            info: { //testÏö©ÎèÑ ÎçîÎØ∏ (ÏßÄÏõåÏïºÌï®)
                title: "Ïù¥Î≤àÏ£º üî•Í∏à in Í∞ïÎÇ®",
                msg1: "Îß§Ïπ≠Ïò§Ìîà - 3Ïõî 4Ïùº ÏõîÏöîÏùº Ïò§Ï†Ñ 10Ïãú",
                msg2: "Í≤∞Í≥ºÎ∞úÌëú - 3Ïõî 6Ïùº ÏàòÏöîÏùº Ïò§ÌõÑ 10Ïãú",
                // cutline: 0,
            },
            user: {
                nickname: "data_ÎãâÎÑ§ÏûÑ",
                company: "data_ÌöåÏÇ¨Î™Ö",
                img_url: "/images/exampleProfile.jpeg",
                recommendation_code: "data_ÏΩîÎìú",
                current_heart: "data_ÌïòÌä∏Í∞úÏàò",
                chat: "data_ÎåÄÌôîÎ∞©Í∞úÏàò",
                rank: "data_ÏàúÎ≤à",
                location: "data_ÏÑ†Ìò∏ÏßÄÏó≠",
                phone_number: "data_ÎåÄÌëúÏó∞ÎùΩÏ≤ò",
                team_detail: "data_ÌåÄÏÜåÍ∞úÎ¨∏Íµ¨_blah blah~ Ïù¥Í±¥ ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§. Ïö∞Î¶¨ ÌåÄÏùÄ ÌèâÎ≤îÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§. ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§. blah blah blah blah ÌÖåÏä§Ìä∏Îã§ Î∏îÎùº blah"
                //ÎÇòÏ§ëÏóê Ïú†Ï†ÄÏùò Î™®Îç∏ ÎÇ¥ ÌïÑÎìú Í∞úÏàòÏôÄ ÎßûÏ∂∞Ïïº Ìï† Í≤ÉÏûÑ
            },
            ex_user: {
                nickname: "data_ÏÉÅÎåÄÎãâÎÑ§ÏûÑ",
                company: "data_ÏÉÅÎåÄÌöåÏÇ¨Î™Ö",
                img_url: "/images/counterProfile.jpeg",
                team_detail: "data_ÏÉÅÎåÄÌåÄÏÜåÍ∞úÎ¨∏Íµ¨_ÎèôÌï¥Î¨ºÍ≥º Î∞±ÎëêÏÇ∞Ïù¥ ÎßàÎ•¥Í≥† Îã≥ÎèÑÎ°ù ÌïòÎäêÎãòÏù¥ Î≥¥Ïö∞ÌïòÏÇ¨ Ïö∞Î¶¨ÎÇòÎùº ÎßåÏÑ∏ Î¨¥Í∂ÅÌôî ÏÇºÏ≤úÎ¶¨ ÌôîÎ†§Í∞ïÏÇ∞ ÎåÄÌïúÏÇ¨Îûå ÎåÄÌïúÏúºÎ°ú Í∏∏Ïù¥ Î≥¥Ï†ÑÌïòÏÑ∏",
            },
            meeting: {
                title: "Ïù¥Î≤àÏ£º üî•Í∏à in Í∞ïÎÇ®",
                msg1: "Îß§Ïπ≠Ïò§Ìîà - 3Ïõî 4Ïùº ÏõîÏöîÏùº Ïò§Ï†Ñ 10Ïãú",
                msg2: "Í≤∞Í≥ºÎ∞úÌëú - 3Ïõî 6Ïùº ÏàòÏöîÏùº Ïò§ÌõÑ 10Ïãú"
            },
            cutline: 0,
        }
    }

    componentDidMount () {
        // let self = this;
        // axios.get("http://localhost:9292/get_meeting_info_first",
        //     ).then(response => {
        //     console.log(response.data.location);
        //     self.setState({
        //         meeting: response.data,
        //     })
        // })
        let self = this;
        axios.get("/api/meeting_info/")
        .then(response => {
            console.log(response.data[0])
            self.setState({ meeting_info: response.data[0] })
        })
        .catch(err => console.log(err));
    }

    render() {
    return (
        <BrowserRouter>
            <div className="frame">
                <Route exact path="/"
                       render={(props) => (
                           <Main
                               {...props}
                               meeting_info={this.state.meeting_info}
                               info={this.state.info}
                               user={this.state.user}
                               ex_user={this.state.ex_user}
                               is_joined={this.props.is_joined}
                               is_joined_done={this.props.is_joined_done}
                               is_copied={this.props.is_copied}
                               offPopup={this.props.offPopup}
                               offPopupJoin={this.props.offPopupJoin}
                               onJoinedPopup={this.props.onJoinedPopup}
                               onCopiedPopup={this.props.onCopiedPopup}
                               meeting={this.props.meeting}
                               cutline={this.state.cutline}
                           />
                               )} />
                {/*offPopup={this.props.offPopup}*/}
                <Route path="/profile"
                       render={(props) => (
                           <Profile
                               {...props}
                               user={this.state.user}
                           />
                       )} />
                <Route path="/heart"
                       render={(props) => (
                           <Heart
                               {...props}
                               user={this.state.user}
                           />
                       )} />
                <Route path="/chat"
                       render={(props) => (
                           <Chat
                               {...props}
                               user={this.state.user}
                               ex_user={this.state.ex_user}//maybe not necessary
                           />
                       )} />
                <Route path="/init" component={Initpage}/>
                <Route path="/sign_up" component={SignUp}/>
                <Route path="/matching_result"
                       render={(props) => (
                           <Result
                               {...props}
                               ex_user={this.state.ex_user}
                           />
                       )} />
                {/*<Redirect from="/" to="/init" />*/}

            </div>
        </BrowserRouter>
    );
  }
}

// Ïï°ÏÖò ÏÉùÏÑ± Ìï®Ïàò Ï§ÄÎπÑ
const mapToDispatch = (dispatch) => ({
    offPopup: () => dispatch(actions.deletePopup()),
    offPopupJoin: () => dispatch(actions.deletePopupJoin()),
    onJoinedPopup: () => dispatch(actions.createJoinedPopup()),
    onCopiedPopup: () => dispatch(actions.createCopiedPopup()),
    // onClickedMainButton: () => dispatch(actions.createClickedMainButton())
});

const mapToState = (state) => ({
    is_joined: state.is_joined,
    is_copied: state.is_copied,
    is_joined_done: state.is_joined_done,
    meeting: state.meeting,
})

// Î¶¨ÎçïÏä§Ïóê Ïó∞Í≤∞ÏãúÌÇ§Í≥† ÎÇ¥Î≥¥ÎÇ¥Í∏∞
export default connect(mapToState, mapToDispatch)(App);